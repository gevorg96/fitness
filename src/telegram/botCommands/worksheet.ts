import {Markup, Telegraf} from "telegraf";
import {SessionContext} from "../sessionContext";
import {paymentSuccess} from "../constants";
import {initStepInfo, refreshSteps} from "../steps";
import {UserService} from "../../services/userService";
import {timeZoneResolver} from "../../utils/timeZoneResolver";
import {delay} from "../../utils/delay";
import {CommandBuilder} from "./internal/commandBuilder";

const userService = new UserService();

export const worksheet = (bot: Telegraf<SessionContext>) => {
    bot.action('payment', async ctx => {
        await ctx.replyWithHTML("** –§–æ—Ä–º–∏—Ä—É—é –ø–ª–∞—Ç–µ–∂ **")
        await delay(1000);
        await ctx.replyWithHTML("** –°–Ω–∏–º–∞—é –¥–µ–Ω—å–≥–∏ **")
        await delay(1000)
        await ctx.replyWithHTML(paymentSuccess)

        let now = new Date();
        now.setMonth(now.getMonth() + 1)
        await userService.update(ctx.chat.id, {paidTo: {value: now}});

        ctx.session.step = 'objective'
        ctx.session.stepInfo = JSON.stringify(initStepInfo('objective'))
        await ctx.replyWithHTML("1. –í–∞—à–∞ —Ü–µ–ª—å:", new CommandBuilder()
            .add('–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã', 'weight_up')
            .add('–°—É—à–∫–∞', 'weight_down')
            .build());
    })

    bot.action('objective', async ctx => {
        ctx.session.step = ctx.match.input;
        ctx.session.stepInfo = JSON.stringify(initStepInfo(ctx.match.input))

        await ctx.editMessageText('1. –í–∞—à–∞ —Ü–µ–ª—å:')
        await ctx.editMessageReplyMarkup(new CommandBuilder()
            .add('–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã', 'weight_up')
            .add('–°—É—à–∫–∞', 'weight_down')
            .build().reply_markup)
    })
    
    bot.action(/weight_(up|down)/, async ctx => {
        let stepInfo = refreshSteps(ctx.session.stepInfo, ctx.match.input);
        ctx.session.stepInfo = JSON.stringify(stepInfo)
        ctx.session.step = ctx.match.input;

        await ctx.editMessageText('2. –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç')
        await ctx.editMessageReplyMarkup(new CommandBuilder()
            .bulkAdd([{name: '18-35', callback: 'young'},{ name: '35-50', callback: 'old'}])
            .add('–ù–∞–∑–∞–¥', stepInfo.prev)
            .build().reply_markup);
    })
    
    bot.action(/(young|old)/, async ctx => {
        let stepInfo = refreshSteps(ctx.session.stepInfo, ctx.match.input);
        ctx.session.stepInfo = JSON.stringify(stepInfo);
        ctx.session.step = ctx.match.input;

        await ctx.editMessageText('3. –¢–∏–ø —Ñ–∏–≥—É—Ä—ã')
        await ctx.editMessageReplyMarkup(new CommandBuilder()
            .add('–≠–∫—Ç–æ–º–æ—Ä—Ñ', 'thin')
            .add('–ú–µ–∑–æ–º–æ—Ä—Ñ', 'muscular')
            .add('–≠–Ω–¥–æ–º–æ—Ä—Ñ', 'fat')
            .add('–ù–∞–∑–∞–¥', stepInfo.prev)
            .build().reply_markup);
    })
    
    bot.action(/(thin|muscular|fat)/, async ctx => {
        let stepInfo = refreshSteps(ctx.session.stepInfo, ctx.match.input);
        ctx.session.stepInfo = JSON.stringify(stepInfo);
        ctx.session.step = ctx.match.input;

        await ctx.editMessageText('4. –í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:')
        await ctx.editMessageReplyMarkup(new CommandBuilder()
            .add('–ù–∏–∑–∫–∞—è', 'activity_low')
            .add('–°—Ä–µ–¥–Ω—è—è', 'activity_medium')
            .add('–í—ã—Å–æ–∫–∞—è', 'activity_high')
            .add('–ù–∞–∑–∞–¥', stepInfo.prev)
            .build().reply_markup);
    })
    
    bot.action(/activity_(low|medium|high)/, async ctx => {
        let stepInfo = refreshSteps(ctx.session.stepInfo, ctx.match.input);
        ctx.session.stepInfo = JSON.stringify(stepInfo);
        ctx.session.step = ctx.match.input;
        ctx.session.inventories = null;

        await ctx.editMessageText('5. –ù–∞–ª–∏—á–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤):')
        await ctx.editMessageReplyMarkup(getInventoryMarkup(stepInfo.prev).reply_markup)
    })
    
    bot.action(/inventory_[0-9]/, ctx => {
        const step = 'inventory';
        const selected = ctx.match.input.split('_').pop();
        if (selected === '9') {
            ctx.session.inventories = null;
        }
        
        let stepInfo = refreshSteps(ctx.session.stepInfo, step + '_9');
        ctx.session.stepInfo = JSON.stringify(stepInfo);
        ctx.session.step = step;
        
        if (ctx.session.inventories !== null) {
            let inventoriesArray = (ctx.session.inventories as string).split("_");

            let idx = inventoriesArray.indexOf(selected);
            if (idx >= 0 && idx < 9) {
                inventoriesArray = inventoriesArray.filter(x => x !== selected)
                if (inventoriesArray && inventoriesArray.length > 0) {
                    ctx.session.inventories = inventoriesArray.join("_")
                } else {
                    ctx.session.inventories = null;
                }
            } else {
                ctx.session.inventories = ctx.session.inventories + "_" + selected;
            }
        } else {
            ctx.session.inventories = selected !== '9' ? selected : null;
        }

        ctx.editMessageReplyMarkup(getInventoryMarkup(stepInfo.prev, ctx.session.inventories).reply_markup)
    })

    bot.action('days', async ctx => {
        let stepInfo = refreshSteps(ctx.session.stepInfo, ctx.match.input);
        ctx.session.stepInfo = JSON.stringify(stepInfo);

        ctx.session.inventories = null;
        ctx.session.days = null;
        ctx.session.step = ctx.match.input

        await ctx.editMessageText('6. –í –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º:')
        await ctx.editMessageReplyMarkup(getDaysMarkup(stepInfo.prev).reply_markup)
    })
    
    bot.action(/day_[0-9]/, ctx => {
        const selected = ctx.match.input.split('_').pop();
        
        if (ctx.session.days !== null) {
            let daysArray = (ctx.session.days as string).split("_");

            if (daysArray.indexOf(selected) >= 0) {
                daysArray = daysArray.filter(x => x !== selected)
                if (daysArray && daysArray.length > 0) {
                    ctx.session.days = daysArray.join("_")
                } else {
                    ctx.session.days = null;
                }
            } else {
                ctx.session.days = ctx.session.days + "_" + selected;
            }
        } else {
            ctx.session.days = selected;
        }

        ctx.editMessageReplyMarkup(getDaysMarkup('inventory_9', ctx.session.days).reply_markup)
    })

    bot.action('time', async ctx => {
        let stepInfo = refreshSteps(ctx.session.stepInfo, ctx.match.input);
        ctx.session.stepInfo = JSON.stringify(stepInfo);

        ctx.session.days = null
        ctx.session.step = ctx.match.input;

        await ctx.editMessageText('7. –ú–Ω–µ –µ—â–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –≤–æ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã? –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)')
        await ctx.editMessageReplyMarkup(Markup.inlineKeyboard([Markup.button.callback('–ù–∞–∑–∞–¥', stepInfo.prev)]).reply_markup)
    })

    bot.hears(/^([0-9]?[0-9]):[0-9][0-9]$/, async ctx => {
        if (ctx.session.step === 'time') {

            let time = ctx.match.input.split(":");
            let formatException = "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã _.. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑";

            if (time.length !== 2) {
                await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
                return
            }

            let hours = +(time[0])
            let minutes = +(time[1])
            if (hours < 0 || hours > 23) {
                await ctx.reply(formatException.replace("_", "—á–∞—Å—ã"));
                return
            }
            if (minutes < 0 || minutes > 59) {
                await ctx.reply(formatException.replace("_", "–º–∏–Ω—É—Ç—ã"));
                return
            }

            ctx.session.step = 'location'
            await ctx.replyWithHTML(`..–æ—Ö, —á—É—Ç—å –Ω–µ –∑–∞–±—ã–ª. –í –º–∏—Ä–µ –∂–µ —Ç–∞–∫ –º–Ω–æ–≥–æ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤.\nüåç –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–π –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —è —Å–ª—É—á–∞–π–Ω–æ —Ç–µ–±–µ –Ω–æ—á—å—é –Ω–µ –Ω–∞–ø–∏—Å–∞–ª. \n‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é`,
                Markup.inlineKeyboard([Markup.button.callback('–ù–∞–∑–∞–¥', 'time')]))
        }
    })

    bot.on('location', async ctx => {
        if (ctx.session.step === 'location') {
            let location = ctx.message.location;
            await ctx.reply(`üìç –°–∫–∞—á–∏–≤–∞—é –∫–∞—Ä—Ç—É... \n–¢–∞–∫ –Ω–µ–ø—Ä–∏–≤—ã—á–Ω–æ –±–µ–∑ 5G. –ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.`)
            const timeZone = await timeZoneResolver({latitude: location.latitude, longitude: location.longitude})

            await ctx.reply(`–ù–∞—à–µ–ª —Ç–≤–æ–π –≥–æ—Ä–æ–¥. –ß—Ç–æ-—Ç–æ —è –∑–∞—Å–º–æ—Ç—Ä–µ–ª—Å—è –Ω–∞ —Ñ–æ—Ç–∫–∏ –≤ Google Maps ‚Äî –∫—Ä–∞—Å–∏–≤–æ —Ç–∞–º —É –≤–∞—Å, –º–Ω–æ–≥–æ —Ö–æ—Ä–æ—à–∏—Ö –ø–∞—Ä–∫–æ–≤ üå≥\n–û—Ç–ª–∏—á–Ω–æ! –Ø –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª ‚úèÔ∏è`)
            await ctx.reply('–ù–∞ —ç—Ç–æ–º –≤—Å—ë! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Ç–µ–±–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é :)')
            console.log(timeZone)
            ctx.session.step = ''
        }
    })
}

const getInventoryMarkup = (prev: string, inventories: string = null) => {
    let result = [
        [Markup.button.callback('–®—Ç–∞–Ω–≥–∞', 'inventory_0')],
        [Markup.button.callback('–ì–∞–Ω—Ç–µ–ª–∏', 'inventory_1')],
        [Markup.button.callback('–¢—É—Ä–Ω–∏–∫', 'inventory_2')]
    ]
    
    if (inventories && inventories.length > 0) {
        let selected = inventories.split("_");

        for (const el of selected) {
            let inv = +el;
            if (inv >= 0 && inv <= 3) {
                result[inv][0].text = result[inv][0].text + ' - ‚úî'
            }
        }

        result.push([Markup.button.callback('–î–∞–ª–µ–µ', 'days')])
    }
    
    result.push([Markup.button.callback('–ù–∞–∑–∞–¥', prev)])
    return Markup.inlineKeyboard(result);
}

const getDaysMarkup = (prev: string, days: string = null) => {
    let result = [
        [Markup.button.callback('–ü–Ω', 'day_0')],
        [Markup.button.callback('–í—Ç', 'day_1')],
        [Markup.button.callback('–°—Ä', 'day_2')],
        [Markup.button.callback('–ß—Ç', 'day_3')],
        [Markup.button.callback('–ü—Ç', 'day_4')],
        [Markup.button.callback('–°–±', 'day_5')],
        [Markup.button.callback('–í—Å', 'day_6')],
        [Markup.button.callback('–ù–∞–∑–∞–¥', prev)],
    ];

    if (days && days.length > 0) {
        let selected = days.split("_");
        
        for (const el of selected) {
            let inv = +el;
            if (inv >= 0 && inv <= 6) {
                result[inv][0].text = result[inv][0].text + ' - ‚úî'
            }
        }

        result.push([Markup.button.callback('–î–∞–ª–µ–µ', 'time')]);
    }

    return Markup.inlineKeyboard(result);
}